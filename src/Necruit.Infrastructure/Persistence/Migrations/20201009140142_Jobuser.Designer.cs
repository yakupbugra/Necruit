// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Necruit.Infrastructure.Persistence.Configurations;

namespace Necruit.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(NecruitDbContext))]
    [Migration("20201009140142_Jobuser")]
    partial class Jobuser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0-rc.1.20451.13");

            modelBuilder.Entity("InterviewUser", b =>
                {
                    b.Property<int>("InterviewsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("InterviewsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("InterviewUser");
                });

            modelBuilder.Entity("Necruit.Domain.Entities.Interview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RecruitmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RecruitmentId");

                    b.ToTable("Interview");
                });

            modelBuilder.Entity("Necruit.Domain.Entities.InterviewFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InterviewId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InterviewId");

                    b.HasIndex("UserId");

                    b.ToTable("InterviewFeedback");
                });

            modelBuilder.Entity("Necruit.Domain.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("Necruit.Domain.Entities.Recruitment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StageId")
                        .HasColumnType("int");

                    b.Property<int?>("TalentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("StageId");

                    b.HasIndex("TalentId");

                    b.ToTable("Recruitment");
                });

            modelBuilder.Entity("Necruit.Domain.Entities.RecruitmentStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RecruitmentStage");
                });

            modelBuilder.Entity("Necruit.Domain.Entities.Talent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ExpectedSalary")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInPool")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Linkedin")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Location")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Skype")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Talent");
                });

            modelBuilder.Entity("Necruit.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2020, 10, 9, 17, 1, 41, 723, DateTimeKind.Local).AddTicks(8087),
                            Email = "admin@admin.com",
                            IsActive = true,
                            Location = "Turkey",
                            Name = "admin",
                            Password = "1234",
                            Surname = "admin"
                        });
                });

            modelBuilder.Entity("InterviewUser", b =>
                {
                    b.HasOne("Necruit.Domain.Entities.Interview", null)
                        .WithMany()
                        .HasForeignKey("InterviewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Necruit.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Necruit.Domain.Entities.Interview", b =>
                {
                    b.HasOne("Necruit.Domain.Entities.Recruitment", "Recruitment")
                        .WithMany("Interviews")
                        .HasForeignKey("RecruitmentId");

                    b.Navigation("Recruitment");
                });

            modelBuilder.Entity("Necruit.Domain.Entities.InterviewFeedback", b =>
                {
                    b.HasOne("Necruit.Domain.Entities.Interview", "Interview")
                        .WithMany("InterviewFeedbacks")
                        .HasForeignKey("InterviewId");

                    b.HasOne("Necruit.Domain.Entities.User", "User")
                        .WithMany("InterviewFeedbacks")
                        .HasForeignKey("UserId");

                    b.Navigation("Interview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Necruit.Domain.Entities.Job", b =>
                {
                    b.HasOne("Necruit.Domain.Entities.User", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Necruit.Domain.Entities.Recruitment", b =>
                {
                    b.HasOne("Necruit.Domain.Entities.Job", "Job")
                        .WithMany("Recruitments")
                        .HasForeignKey("JobId");

                    b.HasOne("Necruit.Domain.Entities.RecruitmentStage", "Stage")
                        .WithMany("Recruitments")
                        .HasForeignKey("StageId");

                    b.HasOne("Necruit.Domain.Entities.Talent", "Talent")
                        .WithMany("Recruitments")
                        .HasForeignKey("TalentId");

                    b.Navigation("Job");

                    b.Navigation("Stage");

                    b.Navigation("Talent");
                });

            modelBuilder.Entity("Necruit.Domain.Entities.Talent", b =>
                {
                    b.HasOne("Necruit.Domain.Entities.User", "Owner")
                        .WithMany("Talents")
                        .HasForeignKey("UserId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Necruit.Domain.Entities.Interview", b =>
                {
                    b.Navigation("InterviewFeedbacks");
                });

            modelBuilder.Entity("Necruit.Domain.Entities.Job", b =>
                {
                    b.Navigation("Recruitments");
                });

            modelBuilder.Entity("Necruit.Domain.Entities.Recruitment", b =>
                {
                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("Necruit.Domain.Entities.RecruitmentStage", b =>
                {
                    b.Navigation("Recruitments");
                });

            modelBuilder.Entity("Necruit.Domain.Entities.Talent", b =>
                {
                    b.Navigation("Recruitments");
                });

            modelBuilder.Entity("Necruit.Domain.Entities.User", b =>
                {
                    b.Navigation("InterviewFeedbacks");

                    b.Navigation("Jobs");

                    b.Navigation("Talents");
                });
#pragma warning restore 612, 618
        }
    }
}
